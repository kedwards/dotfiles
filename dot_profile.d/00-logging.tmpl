{{- $shell := env "SHELL" | base -}}
#!/usr/bin/{{ $shell }}

# =============================================================================
# CENTRALIZED LOGGING FUNCTIONS
# =============================================================================
# Provides standardized logging across all profile files
# Set PROFILE_DEBUG=1 to enable debug logging
# Set PROFILE_LOG_FILE to redirect logs to file
# =============================================================================

# Color codes for different log levels (with readonly check)
if [[ -z "${LOG_COLOR_INFO:-}" ]]; then
  readonly LOG_COLOR_INFO="\033[0;32m"    # Green
  readonly LOG_COLOR_WARN="\033[0;33m"    # Yellow  
  readonly LOG_COLOR_ERROR="\033[0;31m"   # Red
  readonly LOG_COLOR_DEBUG="\033[0;36m"   # Cyan
  readonly LOG_COLOR_RESET="\033[0m"      # Reset
  readonly LOG_FILE="${PROFILE_LOG_FILE:-$HOME/.cache/profile-debug.log}"
fi

# Ensure log directory exists if logging to file
_ensure_log_dir() {
  if [[ -n "${PROFILE_LOG_FILE:-}" ]]; then
    mkdir -p "$(dirname "$PROFILE_LOG_FILE")" 2>/dev/null
  fi
}

# Core logging function
_log() {
  local level="$1"
  local color="$2"
  shift 2
  local message="$*"
  local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  local caller="${BASH_SOURCE[2]##*/}:${BASH_LINENO[1]:-unknown}"
  
  # Handle cases where BASH_SOURCE might not be available (zsh compatibility)
  [[ -z "${BASH_SOURCE[2]:-}" ]] && caller="shell:interactive"
  
  # Format message
  local formatted="[$timestamp] [$level] [$caller] $message"
  
  # Output to stderr with color (if terminal supports it)
  if [[ -t 2 ]] && [[ "${PROFILE_NO_COLOR:-}" != "1" ]]; then
    echo -e "${color}${formatted}${LOG_COLOR_RESET}" >&2
  else
    echo "$formatted" >&2
  fi
  
  # Also log to file if configured
  if [[ -n "${PROFILE_LOG_FILE:-}" ]]; then
    _ensure_log_dir
    echo "$formatted" >> "$LOG_FILE" 2>/dev/null
  fi
}

# Public logging functions
log_info() {
  _log "INFO" "$LOG_COLOR_INFO" "$@"
}

log_warn() {
  _log "WARN" "$LOG_COLOR_WARN" "$@"  
}

log_error() {
  _log "ERROR" "$LOG_COLOR_ERROR" "$@"
}

log_debug() {
  # Only log debug messages if debug mode is enabled
  [[ "${PROFILE_DEBUG:-}" == "1" ]] && _log "DEBUG" "$LOG_COLOR_DEBUG" "$@"
}

# Performance timing functions
log_timer_start() {
  local timer_name="${1:-default}"
  declare -g "PROFILE_TIMER_${timer_name}"="$(date +%s%3N)"
}

log_timer_end() {
  local timer_name="${1:-default}"
  local timer_var="PROFILE_TIMER_${timer_name}"
  local start_time="${!timer_var:-}"
  
  if [[ -n "$start_time" ]]; then
    local end_time=$(date +%s%3N)
    local duration=$((end_time - start_time))
    log_debug "Timer '$timer_name': ${duration}ms"
    unset "$timer_var"
  else
    log_warn "Timer '$timer_name' was not started"
  fi
}

# Function execution wrapper with timing and error handling
log_exec() {
  local func_name="$1"
  shift
  
  log_debug "Executing: $func_name $*"
  log_timer_start "$func_name"
  
  if "$func_name" "$@"; then
    log_timer_end "$func_name"
    log_debug "Successfully completed: $func_name"
    return 0
  else
    local exit_code=$?
    log_timer_end "$func_name"
    log_error "Failed to execute: $func_name (exit code: $exit_code)"
    return $exit_code
  fi
}

# Debug mode utilities
profile_debug_on() {
  export PROFILE_DEBUG=1
  log_info "Profile debug logging enabled"
  [[ -n "${PROFILE_LOG_FILE:-}" ]] && log_info "Logging to file: $LOG_FILE"
}

profile_debug_off() {
  export PROFILE_DEBUG=0
  log_info "Profile debug logging disabled"
}

profile_debug_status() {
  echo "Profile Debug Status:"
  echo "  PROFILE_DEBUG: ${PROFILE_DEBUG:-0}"
  echo "  PROFILE_LOG_FILE: ${PROFILE_LOG_FILE:-not set}"
  echo "  PROFILE_NO_COLOR: ${PROFILE_NO_COLOR:-not set}"
  echo "  Log file: $LOG_FILE"
}

# Export functions for use by other profile files
export -f log_info log_warn log_error log_debug
export -f log_timer_start log_timer_end log_exec  
export -f profile_debug_on profile_debug_off profile_debug_status