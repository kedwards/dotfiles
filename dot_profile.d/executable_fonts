#!/usr/bin/bash
# Nerd Fonts Management
# DO NOT EDIT THIS FILE - Generated by chezmoi template

# Font management aliases
alias fonts='fc-cache -f -v'
alias inf='install_nerd_font'
alias rnf='remove_nerd_font'
alias lnf='list_installed_fonts'

# Select the Nerd Font from https://www.nerdfonts.com/font-downloads
fonts_list=("Agave" "AnonymousPro" "Arimo" "AurulentSansMono" "BigBlueTerminal" "BitstreamVeraSansMono" "CascadiaCode" "CodeNewRoman" "ComicShannsMono" "Cousine" "DaddyTimeMono" "DejaVuSansMono" "FantasqueSansMono" "FiraCode" "FiraMono" "Gohu" "Go-Mono" "Hack" "Hasklig" "HeavyData" "Hermit" "iA-Writer" "IBMPlexMono" "InconsolataGo" "InconsolataLGC" "Inconsolata" "IosevkaTerm" "JetBrainsMono" "Lekton" "LiberationMono" "Lilex" "Meslo" "Monofur" "Monoid" "Mononoki" "MPlus" "NerdFontsSymbolsOnly" "Noto" "OpenDyslexic" "Overpass" "ProFont" "ProggyClean" "RobotoMono" "ShareTechMono" "SourceCodePro" "SpaceMono" "Terminus" "Tinos" "UbuntuMono" "Ubuntu" "VictorMono")

install_nerd_font() {
  # Check for required dependencies
  local cmd download_tool
  if command -v curl >/dev/null 2>&1; then
    cmd="curl -fL --connect-timeout 10 --max-time 300 -o"
    download_tool="curl"
  elif command -v wget >/dev/null 2>&1; then
    cmd="wget --timeout=10 --tries=3 -O"
    download_tool="wget"
  else
    echo "[ERROR] curl or wget is required to install a nerd font!"
    echo "Please install one of these tools and try again."
    return 1
  fi

  # Check for unzip
  if ! command -v unzip >/dev/null 2>&1; then
    echo "[ERROR] unzip is required to install fonts!"
    echo "Please install unzip and try again."
    return 1
  fi

  # Check for fc-cache
  if ! command -v fc-cache >/dev/null 2>&1; then
    echo "[ERROR] fc-cache is required to install fonts!"
    echo "Please install fontconfig and try again."
    return 1
  fi

  echo "Using $download_tool to download fonts..."

  PS3='Select font to install, or 0 to exit: '
  select font in "${fonts_list[@]}"; do
    if [[ $REPLY == "0" ]]; then
      return
    elif [[ -z $font ]]; then
      echo 'Invalid choice, try again' >&2
    else
      break
    fi
  done

  # Check if font already installed
  if [ -d "$HOME/.fonts/$font/" ]; then
    echo "[INFO] Font '$font' is already installed."
    return 0
  fi

  local date_stamp=$(date +"%F_%H-%M-%S")
  local font_zip="${font}.zip"
  local font_url="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/$font.zip"
  
  echo "[INFO] Installing font: $font"
  
  # Create fonts directory
  if ! mkdir -p "$HOME/.fonts"; then
    echo "[ERROR] Failed to create fonts directory: $HOME/.fonts"
    return 1
  fi
  
  # Download font with error handling
  echo "[INFO] Downloading $font from GitHub..."
  if ! $cmd "$font_zip" "$font_url"; then
    echo "[ERROR] Failed to download $font from $font_url"
    echo "Please check your internet connection and try again."
    return 1
  fi
  
  # Verify download
  if [ ! -f "$font_zip" ] || [ ! -s "$font_zip" ]; then
    echo "[ERROR] Downloaded file is missing or empty: $font_zip"
    rm -f "$font_zip" 2>/dev/null
    return 1
  fi
  
  # Create font-specific directory
  if ! mkdir -p "$HOME/.fonts/$font"; then
    echo "[ERROR] Failed to create font directory: $HOME/.fonts/$font"
    rm -f "$font_zip"
    return 1
  fi
  
  # Extract font with error handling
  echo "[INFO] Extracting $font..."
  if ! unzip -q "$font_zip" -d "$HOME/.fonts/$font/" 2>/dev/null; then
    echo "[ERROR] Failed to extract $font_zip"
    rm -f "$font_zip"
    rm -rf "$HOME/.fonts/$font"
    return 1
  fi
  
  # Update font cache
  echo "[INFO] Updating font cache..."
  if ! fc-cache -fv >/dev/null 2>&1; then
    echo "[WARNING] Failed to update font cache, but font was installed"
  fi
  
  # Clean up
  rm -f "$font_zip"
  
  # Record installation
  echo "$font $date_stamp" >>"$HOME/.fonts/_sysinit_font.lock"
  
  echo "[SUCCESS] Font '$font' installed successfully!"
  echo "[INFO] Restart your terminal or applications to use the new font."
}

list_installed_fonts() {
  local lock_file="$HOME/.fonts/_sysinit_font.lock"
  
  if [ ! -f "$lock_file" ]; then
    echo "[INFO] No fonts installed with this script."
    echo "Use 'inf' or 'install_nerd_font' to install fonts."
    return 0
  fi
  
  if [ ! -r "$lock_file" ]; then
    echo "[ERROR] Cannot read lock file: $lock_file"
    return 1
  fi
  
  echo "Fonts installed by this script:"
  echo "================================"
  
  # Display fonts with installation dates
  while IFS=' ' read -r font_name install_date || [ -n "$font_name" ]; do
    if [ -n "$font_name" ]; then
      if [ -d "$HOME/.fonts/$font_name" ]; then
        echo "✓ $font_name (installed: $install_date)"
      else
        echo "✗ $font_name (installed: $install_date) [DIRECTORY MISSING]"
      fi
    fi
  done < "$lock_file"
  
  echo ""
  echo "Use 'rnf' or 'remove_nerd_font' to remove fonts."
}

remove_nerd_font() {
  if [ ! -f "$HOME/.fonts/_sysinit_font.lock" ]; then
    echo "[INFO] No fonts installed with this script."
    return 0
  fi

  # Shell-specific array handling
  mapfile -t installed_fonts < <(awk '{print $1}' "$HOME/.fonts/_sysinit_font.lock")

  # Check if any fonts are available
  if [ ${#installed_fonts[@]} -eq 0 ]; then
    echo "[INFO] No fonts found in lock file."
    return 0
  fi

  PS3='Select font to remove, or 0 to exit: '
  select font in "${installed_fonts[@]}"; do
    if [[ $REPLY == "0" ]]; then
      return
    elif [[ -z $font ]]; then
      echo 'Invalid choice, try again' >&2
    else
      break
    fi
  done

  # Verify font directory exists
  if [ ! -d "$HOME/.fonts/$font/" ]; then
    echo "[WARNING] Font directory not found: $HOME/.fonts/$font/"
    echo "[INFO] Removing entry from lock file anyway..."
  else
    echo "[INFO] Removing font directory: $HOME/.fonts/$font/"
    if ! rm -rf "$HOME/.fonts/$font/"; then
      echo "[ERROR] Failed to remove font directory: $HOME/.fonts/$font/"
      echo "Please check file permissions and try again."
      return 1
    fi
  fi
  
  # Update font cache
  if command -v fc-cache >/dev/null 2>&1; then
    echo "[INFO] Updating font cache..."
    if ! fc-cache -fv >/dev/null 2>&1; then
      echo "[WARNING] Failed to update font cache"
    fi
  fi
  
  # Remove from lock file
  if [ -f "$HOME/.fonts/_sysinit_font.lock" ]; then
    if ! sed -i "/^$font /d" "$HOME/.fonts/_sysinit_font.lock" 2>/dev/null; then
      echo "[WARNING] Failed to update lock file"
    fi
  fi
  
  echo "[SUCCESS] Font '$font' removed successfully!"
}
