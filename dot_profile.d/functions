#!/bin/bash

# Starts a port forwarded session via AWS SSM
# and opening the associated URL in the default browser.
sshfwd() {
  CONFIG_FILE="$HOME/.reach.conf"

  if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "Config file not found: $CONFIG_FILE"
    return 1
  fi

  # Get the list of available connections
  # connections=$(grep -oP '(?<=^\[).*?(?=\])' "$CONFIG_FILE")
  mapfile -t connections < <(grep -oP '(?<=^\[).*?(?=\])' "$CONFIG_FILE")

  PS3='Select connection, or 0 to exit: '
  select connection in "${connections[@]}"; do
    if [[ $REPLY == "0" ]]; then
      return
    elif [[ -z $connection ]]; then
      printf '"%s" is not a valid choice\n' "$REPLY" >&2
    else
      break
    fi
  done

  # Extract connection details
  name=$(awk -F ' = ' -v section="[$connection]" '
        $0 == section {found=1; next} 
        found && NF==2 {print $1 "=" $2} 
        found && /^\[.*\]/ {exit}
    ' "$CONFIG_FILE")

  eval "$name" # Convert extracted key-value pairs into variables

  if [[ -z "$name" || -z "$port" || -z "$local_port" || -z $url || -z "$profile" || -z $region || -z $host ]]; then
    echo "Invalid configuration for $connection"
    return 1
  fi

  # Switch AWS profile
  aws-profile_switcher "$profile" -r "$region"

  # Start the SSM session for port forwarding
  aws ssm start-session --target "$(aws ec2 describe-instances \
    --filter "Name=tag:Name,Values=$name" \
    --query "Reservations[0].Instances[?State.Name == 'running'].InstanceId[]" \
    --output text)" \
    --document-name AWS-StartPortForwardingSessionToRemoteHost \
    --parameters "{\"host\":[\"${host:-localhost}\"],\"portNumber\":[\"$port\"], \"localPortNumber\":[\"$local_port\"]}" &
  # --document-name AWS-StartPortForwardingSession \

  # Open the URL
  [[ "$host" == "localhost" ]] && xdg-open "$url"
}

store_credentials() {
  if [ -z "$1" ]; then
    echo "Usage: aws-store_credentials <environment>"
    return 1
  fi

  local env=$1
  aws-profile_switcher "$env"
  export AK="$AWS_ACCESS_KEY_ID" SK="$AWS_SECRET_ACCESS_KEY" ST="$AWS_SESSION_TOKEN"
  aws-profile_switcher -u
}

# Deploys v2 infrastructure using Ansible.
# Arguments:
#   $1 - The Ansible target.
#   $2 - The Ansible environment.
#   $3 - The configuration version (optional, default is main).
#   $4 - The AWS region (optional, default is us-east-1).
#   $5 - The Ansible tags (optional).
#   $6 - The DR deploy flag (optional, default is '').
reach-v2() {
  if [ "$#" -lt 2 ]; then
    cat <<EOF
Usage: reach-v2 <target> <env> [<config>|main] [<region>|us-east-1] [<tags>]
Deploy v2 infrastructure
Parameters:
  target:  ansible target
  env:     ansible environment
  config:  configuration version
  region:  aws region
  tags:    ansible tags
  dr_deploy: DR deploy flag
EOF
    return 1
  else
    target=$1
    profile=$2
    config=${3:-main}
    region=${4:-us-east-1}
    tags=$5
    dr_deploy=$6

    store_credentials ps
    aws-profile_switcher "$profile"

    (
      unset AWS_PROFILE
      echo ANSIBLE_PYTHON_INTERPRETER="$(mise which python)" \
        make -C infra/ansible "${target}" \
        ENV="${profile}" REGION="${region}" TOPV2="$(pwd)" CONFIG="${config}" SERVICE="setup" \
        EXTRA_VARS="ps_aws_access_key_id=$AK ps_aws_secret_access_key=$SK ps_aws_session_token=$ST dr_deploy=$dr_deploy" \
        RUNTAG="${tags}"
    )
    export EXTRA_VARS=""
    export ANSIBLE_PYTHON_INTERPRETER=""
    aws-profile_switcher -u
  fi
  return 0
}
